name: go
visible_name: Go 1.7.1
version: "1.7.1"
compiler_profile: straitjacket/compiler/go
apparmor_profile: straitjacket/compiled/go
filename: source.go
docker_image: straitjacket/lang-go:1.7.1

file_extensions:
  - go

tests:
  template:
    source: |
      package main
      import (
        "bufio"
        "fmt"
        "os"
      )
      func main() {
        var lines []string
        scanner := bufio.NewScanner(os.Stdin)
        for scanner.Scan() {
          lines = append(lines, scanner.Text())
        }

        for _, line := range lines {
          fmt.Println(process(line))
        }
      }

      func process(line string) string {
        // Process each line of input here
        return line
      }
    stdin:  "1\n2\n3\n"
    stdout: "\\A1\n2\n3\n\\z"
    stderr: "\\A\\z"
    exitstatus: 0

  simple:
    source: |
      package main
      import (
        "bufio"
        "fmt"
        "os"
        "strconv"
      )
      func main() {
        var lines []string
        scanner := bufio.NewScanner(os.Stdin)
        for scanner.Scan() {
          lines = append(lines, scanner.Text())
        }

        for _, line := range lines {
          fmt.Println(process(line))
        }
      }

      func process(line string) string {
        number, _ := strconv.Atoi(line)
        return strconv.Itoa(number * 2)
      }
    stdin:  "1\n2\n3\n"
    stdout: "\\A2\n4\n6\n\\z"
    stderr: "\\A\\z"
    exitstatus: 0

  rlimit:
    source: |
      package main
      func main() {
        data := new([107374182]int)
        data[1] = 2
      }
    stdout: "\\A\\z"
    stderr: out of memory
    exitstatus: 2

  apparmor:
    source: |
       package main
       import (
          "os"
          "fmt"
       )
       func main() {
          file, err := os.Open("/etc/hosts")
          if err != nil {
              fmt.Printf("error: %s", err)
              return
          }
          bytes := make([]byte, 4096)
          size, err := file.Read(bytes)
          if err != nil {
              fmt.Printf("error: %s", err)
          }
          fmt.Printf("read: %s", bytes[:size])
          file.Close()
       }
    stdout: "\\Aerror: open /etc/hosts: permission denied\\z"
    stderr: "\\A\\z"
    exitstatus: 0
